@page "/syncfusion"
@using BlazorServerSyncfusion.Interfaces
@using BlazorServerSyncfusion.Services
@using BlazorServerSyncfusion.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using System.Text;
@using System.Text.Json;
@inject IDatabase<TdmsFile> TdmsFileService
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>
<h3>SyncfusionChart</h3>
<SfChart ID="chart" Title="TDMS Data Chart">
    <ChartArea>
        <ChartAreaBorder Width="0" />
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        <ChartAxisMajorGridLines Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Maximum="0.1">
        <ChartAxisLineStyle Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryYAxis>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings EnableHighlight="true" />
    <ChartSeriesCollection>
        <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>


@* @xValue;
 *@
@code {
    private string jsonContent;
    private List<double> dataList = new List<double>();
    private List<ChartData> chartData;
    // int xValue = 0;

    protected override async Task OnInitializedAsync()
    {
        var tdmsFiles = await TdmsFileService.GetAsync();
        if (tdmsFiles != null && tdmsFiles.Any())
        {
           var firstFile = tdmsFiles.First();
           jsonContent = ConvertToBase64(firstFile.Data);
           ParseJsonData(jsonContent);
           chartData = ConvertToChartData(dataList);
        }
        // Test();
    }

    // void Test()
    // {
    //     int arraySize = 12800;
    //     double[] randomValues = new double[arraySize];

    //     Random random = new Random();
    //     List<double> testData = new List<double>();

    //     for (int i = 0; i < arraySize; i++)
    //     {
    //         // -1에서 1 사이의 랜덤한 double 값 생성
    //         double randomValue = (random.NextDouble() * 2) - 1;
    //         randomValues[i] = randomValue;
    //         testData.Add(randomValues[i]);
    //     }
    //     chartData = ConvertToChartData(testData);
    //     xValue = chartData.Count;
    // }

    private void ParseJsonData(string json)
    {
        try
        {
            var jsonDoc = JsonDocument.Parse(json);
            var root = jsonDoc.RootElement;
            if (root.TryGetProperty("Data", out var dataElement) && dataElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in dataElement.EnumerateArray())
                {
                    if (item.TryGetDouble(out double value))
                    {
                        dataList.Add(value);
                    }
                }
            }
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON parsing error: {ex.Message}");
        }
    }

    private string ConvertToBase64(byte[] data)
    {
        return Encoding.UTF8.GetString(data);
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;

        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData
                {
                    Time = time,
                    Value = value
                });
            time += 1;
        }

        return chartDataList;
    }
}